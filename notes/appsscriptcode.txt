# This is the code used in AppsScript for the implementation with the database
# First, a Firebase database has to be created, with the read and write options set to true
# Secondly, a Biblioteca has to be added with the name of FirebaseApp and version 29
# Lastly, there has to be two activators: one called getAllData(), executed every minute
# And another one with the name importSheet(), executed with every change in the spreadsheet
# UPDATE: now you will need to have a third one for getAllDataBlog(), and get AllData transforms into getAllDataWorkers()
# And another one for application information, similar as the one for the Blog
# There's also another file for updating the number of proposals sent

-> FirebaseToExcelBlog.gs
//GitHub
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/535a878109aba694ced1bba7758eaf0530a5211b/excelCode.gs

//Vídeo de Firebase to Excel
//https://www.youtube.com/watch?v=dOwZ5gzl9wI

//Se actualiza cada minuto
//Ejecutar la función "getAllDataBlog"

//JSON code
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/1645e424909122dd8a7e75b69697ca81e5e0b1a3/appscript.json"

function getAllDataBlog() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  var sheet = spreadsheet[1]; //Puedo cambiar esto para usar solamente la primer hoja, buenísimo para un futuro

  var firebaseUrl = "https://oportunidad-zapata-default-rtdb.firebaseio.com/1JcKn4lV9YC5cF8o_QyekJ7-72u-bRn748CLrLc9jTD0/blog";

  var base = FirebaseApp.getDatabaseByUrl(firebaseUrl);

  var dataSet = [base.getData()];

  //Añadir una columna en limpio para que el código de abajo no de error
  var rowLast = sheet.getLastRow();
  sheet.insertRowAfter(rowLast);

  //Elimina toda la tabla y la actualiza completamente
  sheet.deleteRows(2, sheet.getLastRow()); //sheet.getMaxRows()

  // Las siguientes líneas dependen de la estructura de tu data (comentario original)
  var rows = [],
    data;

  var column5 = sheet.getRange(2, 5, sheet.getLastRow());
  column5.setNumberFormat("@");

  for (i = 0; i < dataSet.length; i++) {
    data = dataSet[i];
    for (j = 1; j < dataSet[i].length; j++) {
      //Verificar el tipo de dato en Firebase y actualizarlo de forma acorde
      //Por ejemplo, mis tipos de dato son id, name, phone, etc.
      rows.push([data[j].number, data[j].title, data[j].description, data[j].content, data[j].time, data[j].writers, data[j].image]); //"Empujo" los datos al Excel
    }
  }

  //Para subir los valores de la base de datos al Sheets
  dataRange = sheet.getRange(2, 1, rows.length, 7); //Fila inicial, columna inicial, fila final, columna final
  dataRange.setValues(rows);
  //Logger.log(rows.length); Imprimir la cantidad de filas

  //Cambiar el color de las columnas
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheets()[1];

  var column1 = sheet.getRange(2, 1, sheet.getLastRow());
  column1.setBackgroundRGB(252, 229, 205);
  column1.setFontWeight("normal");
  column1.setHorizontalAlignment("center");

  var column2 = sheet.getRange(2, 2, sheet.getLastRow());
  column2.setBackgroundRGB(255, 242, 204);
  column2.setFontWeight("normal");
  column2.setHorizontalAlignment("center");

  var column3 = sheet.getRange(2, 3, sheet.getLastRow());
  column3.setBackgroundRGB(217, 210, 233);
  column3.setFontWeight("normal");
  column3.setHorizontalAlignment("center");

  var column4 = sheet.getRange(2, 4, sheet.getLastRow());
  column4.setBackgroundRGB(234, 209, 220);
  column4.setFontWeight("normal");
  column4.setHorizontalAlignment("center");

  var column5 = sheet.getRange(2, 5, sheet.getLastRow());
  column5.setBackgroundRGB(230, 184, 175);
  column5.setFontWeight("normal");
  column5.setHorizontalAlignment("center");
  column5.setNumberFormat("@"); //Para que el formato de texto sea solamente texto, y no como una fecha

  var column6 = sheet.getRange(2, 6, sheet.getLastRow());
  column6.setBackgroundRGB(217, 234, 211);
  column6.setFontWeight("normal");
  column6.setHorizontalAlignment("center");

  var column7 = sheet.getRange(2, 7, sheet.getLastRow());
  column7.setBackgroundRGB(234, 209, 220);
  column7.setFontWeight("normal");
  column7.setHorizontalAlignment("center");

//Eliminar la última columna que se genera de más
  sheet.deleteRow(sheet.getLastRow() + 1);
}

-> FirebaseToExcelWorkers.gs
//GitHub
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/535a878109aba694ced1bba7758eaf0530a5211b/excelCode.gs

//Vídeo de Firebase to Excel
//https://www.youtube.com/watch?v=dOwZ5gzl9wI

//Se actualiza cada minuto
//Ejecutar la función "getAllDataWorkers"

//JSON code
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/1645e424909122dd8a7e75b69697ca81e5e0b1a3/appscript.json"

function getAllDataWorkers() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  var sheet = spreadsheet[0]; //Puedo cambiar esto para usar solamente la primer hoja, buenísimo para un futuro

  var firebaseUrl = "https://oportunidad-zapata-default-rtdb.firebaseio.com/1JcKn4lV9YC5cF8o_QyekJ7-72u-bRn748CLrLc9jTD0/workers";

  var base = FirebaseApp.getDatabaseByUrl(firebaseUrl);

  var dataSet = [base.getData()];

  //Añadir una columna en limpio para que el código de abajo no de error
  var rowLast = sheet.getLastRow();
  sheet.insertRowAfter(rowLast);

  //Elimina toda la tabla y la actualiza completamente
  sheet.deleteRows(2, sheet.getLastRow()); //sheet.getMaxRows()

  var column12 = sheet.getRange(2, 12, sheet.getLastRow());
  column12.setNumberFormat("@");

  // Las siguientes líneas dependen de la estructura de tu data (comentario original)
  var rows = [],
    data;

  for (i = 0; i < dataSet.length; i++) {
    data = dataSet[i];
    for (j = 1; j < dataSet[i].length; j++) {
      //Verificar el tipo de dato en Firebase y actualizarlo de forma acorde
      //Por ejemplo, mis tipos de dato son id, name, phone, etc.
      rows.push([data[j].id, data[j].fullname, data[j].phone, data[j].time, data[j].email, data[j].job, data[j].student, data[j].course, data[j].division, data[j].descriptionShort,
      data[j].descriptionFormal, data[j].showStudent, data[j].category, data[j].socialMedia, data[j].username]); //"Empujo" los datos al Excel
    }
  }

  //Para subir los valores de la base de datos al Sheets
  dataRange = sheet.getRange(2, 1, rows.length, 15); //Fila inicial, columna inicial, fila final, columna final
  dataRange.setValues(rows);
  //Logger.log(rows.length); Imprimir la cantidad de filas

  //Cambiar el color de las columnas
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheets()[0];

  var column1 = sheet.getRange(2, 1, sheet.getLastRow());
  column1.setBackgroundRGB(159, 197, 232);
  column1.setFontWeight("normal");
  column1.setHorizontalAlignment("center");

  var column2 = sheet.getRange(2, 2, sheet.getLastRow());
  column2.setBackgroundRGB(217, 210, 233);
  column2.setFontWeight("normal");
  column2.setHorizontalAlignment("center");

  var column3 = sheet.getRange(2, 3, sheet.getLastRow());
  column3.setBackgroundRGB(252, 229, 205);
  column3.setFontWeight("normal");
  column3.setHorizontalAlignment("center");

  var column4 = sheet.getRange(2, 4, sheet.getLastRow());
  column4.setBackgroundRGB(255, 229, 153);
  column4.setFontWeight("normal");
  column4.setHorizontalAlignment("center");

  var column5 = sheet.getRange(2, 5, sheet.getLastRow());
  column5.setBackgroundRGB(208, 224, 227);
  column5.setFontWeight("normal");
  column5.setHorizontalAlignment("center");

  var column6 = sheet.getRange(2, 6, sheet.getLastRow());
  column6.setBackgroundRGB(147, 196, 125);
  column6.setFontWeight("normal");
  column6.setHorizontalAlignment("center");

  var column7 = sheet.getRange(2, 7, sheet.getLastRow());
  column7.setBackgroundRGB(244, 204, 204);
  column7.setFontWeight("normal");
  column7.setHorizontalAlignment("center");

  var column8 = sheet.getRange(2, 8, sheet.getLastRow());
  column8.setBackgroundRGB(244, 204, 204);
  column8.setFontWeight("normal");
  column8.setHorizontalAlignment("center");

  var column9 = sheet.getRange(2, 9, sheet.getLastRow());
  column9.setBackgroundRGB(244, 204, 204);
  column9.setFontWeight("normal");
  column9.setHorizontalAlignment("center");

  var column10 = sheet.getRange(2, 10, sheet.getLastRow());
  column10.setBackgroundRGB(162, 196, 201);
  column10.setFontWeight("normal");
  column10.setHorizontalAlignment("center");

  var column11 = sheet.getRange(2, 11, sheet.getLastRow());
  column11.setBackgroundRGB(162, 196, 201);
  column11.setFontWeight("normal");
  column11.setHorizontalAlignment("center");

  var column12 = sheet.getRange(2, 12, sheet.getLastRow());
  column12.setBackgroundRGB(255, 229, 153);
  column12.setFontWeight("normal");
  column12.setHorizontalAlignment("center");

  var column13 = sheet.getRange(2, 13, sheet.getLastRow());
  column13.setBackgroundRGB(255, 229, 153);
  column13.setFontWeight("normal");
  column13.setHorizontalAlignment("center");

  var column14 = sheet.getRange(2, 14, sheet.getLastRow());
  column14.setBackgroundRGB(182, 215, 168);
  column14.setFontWeight("normal");
  column14.setHorizontalAlignment("center");

  var column15 = sheet.getRange(2, 15, sheet.getLastRow());
  column15.setBackgroundRGB(182, 215, 168);
  column15.setFontWeight("normal");
  column15.setHorizontalAlignment("center");

//Eliminar la última columna que se genera de más
  sheet.deleteRow(sheet.getLastRow() + 1);
}

-> ExcelToFirebase.gs
//GitHub
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/9c87a1c06b7b33337a5a60471a59ac20be3e74a3/code.gs

//Vídeo de Excel to Firebase
//https://www.youtube.com/watch?v=uYgbwOrW-p4&t=173s

//Se actualiza con cada cambio en Excel automáticamente
//Ejecutar la función "importSheet"

//JSON code
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/1645e424909122dd8a7e75b69697ca81e5e0b1a3/appscript.json"

function getEnvironment() {
  var environment = {
    spreadsheetID: "1JcKn4lV9YC5cF8o_QyekJ7-72u-bRn748CLrLc9jTD0",
    firebaseUrl: "https://oportunidad-zapata-default-rtdb.firebaseio.com/",
  };
  return environment;
}

//Crea un trigger ante un cambio en Google Sheets para la hoja específica
function createSpreadsheetEditTrigger(sheetID) {
  var triggers = ScriptApp.getProjectTriggers();
  var triggerExists = false;
  for (var i = 0; i < triggers.length; i++) {
    if (triggers[i].getTriggerSourceId() == sheetID) {
      triggerExists = true;
      break;
    }
  }

  if (!triggerExists) {
    var spreadsheet = SpreadsheetApp.openById(sheetID);
    ScriptApp.newTrigger("importSheet")
      .forSpreadsheet(spreadsheet)
      .onChange()
      .create();
  }
}

//Elimina todos los triggers existentes para el proyecto
function deleteTriggers() {
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
}

//Inicializa
function initialize(e) {
  writeDataToFirebase(getEnvironment().spreadsheetID);
}

//Escribe la data en la URL de Firebase
function writeDataToFirebase(sheetID) {
  var ss = SpreadsheetApp.openById(sheetID);
  SpreadsheetApp.setActiveSpreadsheet(ss);
  createSpreadsheetEditTrigger(sheetID);
  var sheets = ss.getSheets(); //[1] Para que ocurra con la primer hoja
  for (var i = 0; i < sheets.length; i++) {
    importSheet(sheets[i]);
    SpreadsheetApp.setActiveSheet(sheets[i]);
  }
}

//Una función de utilidad para generar objetos anidados cuando se dan claves en array
function assign(obj, keyPath, value) {
  lastKeyIndex = keyPath.length - 1;
  for (var i = 0; i < lastKeyIndex; ++i) {
    key = keyPath[i];
    if (!(key in obj)) obj[key] = {};
    obj = obj[key];
  }
  obj[keyPath[lastKeyIndex]] = value;
}

//Importar cada hoja cuando hay algún cambio
function importSheet() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var name = sheet.getName();
  var data = sheet.getDataRange().getValues();

  var dataToImport = {};

  for (var i = 1; i < data.length; i++) {
    dataToImport[data[i][0]] = {};
    for (var j = 0; j < data[0].length; j++) {
      assign(dataToImport[data[i][0]], data[0][j].split("__"), data[i][j]);
    }
  }

  var token = ScriptApp.getOAuthToken();

  var firebaseUrl = getEnvironment().firebaseUrl + sheet.getParent().getId() + "/" + name;
  var base = FirebaseApp.getDatabaseByUrl(firebaseUrl, token);
  base.setData("", dataToImport);
}

-> FirebaseToExcelApplication.gs
//GitHub
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/535a878109aba694ced1bba7758eaf0530a5211b/excelCode.gs

//Vídeo de Firebase to Excel
//https://www.youtube.com/watch?v=dOwZ5gzl9wI

//Se actualiza cada minuto
//Ejecutar la función "getAllDataApplication"

//JSON code
//https://github.com/anish-gyawali/Ionic-firebase-excel/blob/1645e424909122dd8a7e75b69697ca81e5e0b1a3/appscript.json"

function getAllDataApplication() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  var sheet = spreadsheet[2]; //Puedo cambiar esto para usar solamente la primer hoja, buenísimo para un futuro

  var firebaseUrl = "https://oportunidad-zapata-default-rtdb.firebaseio.com/1JcKn4lV9YC5cF8o_QyekJ7-72u-bRn748CLrLc9jTD0/application";

  var base = FirebaseApp.getDatabaseByUrl(firebaseUrl);

  var dataSet = [base.getData()];

  //Añadir una columna en limpio para que el código de abajo no de error
  var rowLast = sheet.getLastRow();
  sheet.insertRowAfter(rowLast);

  //Elimina toda la tabla y la actualiza completamente
  sheet.deleteRows(2, sheet.getLastRow()); //sheet.getMaxRows()

  // Las siguientes líneas dependen de la estructura de tu data (comentario original)
  var rows = [],
    data;

/*
  var column3 = sheet.getRange(2, 2, sheet.getLastRow());
  column3.setNumberFormat("@");
*/

  for (i = 0; i < dataSet.length; i++) {
    data = dataSet[i];
    for (j = 1; j < dataSet[i].length; j++) {
      //Verificar el tipo de dato en Firebase y actualizarlo de forma acorde
      //Por ejemplo, mis tipos de dato son id, name, phone, etc.
      rows.push([data[j].id, data[j].appName, data[j].lastVersion, data[j].numberProposals]); //"Empujo" los datos al Excel
    }
  }

  //Para subir los valores de la base de datos al Sheets
  dataRange = sheet.getRange(2, 1, rows.length, 4); //Fila inicial, columna inicial, fila final, columna final
  dataRange.setValues(rows);
  //Logger.log(rows.length); Imprimir la cantidad de filas

  //Cambiar el color de las columnas
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheets()[2];

  //Información importante ¡!
  /*
  getRange(filaInicial,columaInicial,numeroDeFilas)
  getRange(filaInicial,columaInicial,numeroDeFilas,numeroDeColumnas)
  */

  var column1part1 = sheet.getRange("A1");
  column1part1.setBackgroundRGB(221, 126, 107);
  column1part1.setFontWeight("bold");
  column1part1.setHorizontalAlignment("center");

  var column1part2 = sheet.getRange("A2");
  column1part2.setBackgroundRGB(230, 184, 175);
  column1part2.setFontWeight("normal");
  column1part2.setHorizontalAlignment("center");

  var column2part1 = sheet.getRange("B1");
  column2part1.setBackgroundRGB(234, 153, 153);
  column2part1.setFontWeight("bold");
  column2part1.setHorizontalAlignment("center");

  var column2part2 = sheet.getRange("B2");
  column2part2.setBackgroundRGB(244, 204, 204);
  column2part2.setFontWeight("normal");
  column2part2.setHorizontalAlignment("center");

  var column3part1 = sheet.getRange("C1");
  column3part1.setBackgroundRGB(249, 203, 153);
  column3part1.setFontWeight("bold");
  column3part1.setHorizontalAlignment("center");

  var column3part2 = sheet.getRange("C2");
  column3part2.setBackgroundRGB(252, 229, 205);
  column3part2.setFontWeight("normal");
  column3part2.setHorizontalAlignment("center");

  var column4part1 = sheet.getRange("D1");
  column4part1.setBackgroundRGB(180, 167, 214);
  column4part1.setFontWeight("bold");
  column4part1.setHorizontalAlignment("center");

  var column4part2 = sheet.getRange("D2");
  column4part2.setBackgroundRGB(217, 210, 233);
  column4part2.setFontWeight("normal");
  column4part2.setHorizontalAlignment("center");

  //Eliminar la última columna que se genera de más
  //sheet.deleteRow(sheet.getLastRow());
}

-> appsscript.json
{
  "timeZone": "America/Los_Angeles",
  "dependencies": {
    "libraries": [
      {
        "userSymbol": "FirebaseApp",
        "libraryId": "1hguuh4Zx72XVC1Zldm_vTtcUUKUA6iBUOoGnJUWLfqDWx5WlOJHqYkrt",
        "version": "29",
        "developmentMode": true
      }
    ]
  },
  "exceptionLogging": "STACKDRIVER",
  "oauthScopes": [
    "https://www.googleapis.com/auth/firebase.database",
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/script.scriptapp",
    "https://www.googleapis.com/auth/script.external_request"
  ],
  "executionApi": {
    "access": "DOMAIN"
  },
  "webapp": {
    "executeAs": "USER_DEPLOYING",
    "access": "ANYONE_ANONYMOUS"
  }
}

-> UpdateNumberProposals.gs
function updateNumberProposals() {
  var ss = SpreadsheetApp.getActive();
  var main = ss.getSheetByName('application');
  var archive = ss.getSheetByName('workers');
  var row = archive.getLastRow() - 1;

  main.getRange('D2').setValue(row);
}